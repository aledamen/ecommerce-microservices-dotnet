@page "/"
@using ecommerce.frontend.Dtos
@using ecommerce.frontend.Dtos.Products
@using ecommerce.frontend.Interfaces
@inject IProductService _productService
@rendermode InteractiveServer

<PageTitle>Products Section</PageTitle>

<h1>Products Section</h1>
<p>Manage products</p>

<div class="mb-3 p-3 border rounded bg-light">
    <div class="row g-2">
        <div class="col">
            <input @bind="productName" class="form-control" placeholder="Name" />
        </div>
        <div class="col">
            <input @bind="productDescription" class="form-control" placeholder="Description" />
        </div>
        <div class="col">
            <input type="number" step="0.01" @bind="productPrice" class="form-control" placeholder="Price" />
        </div>
        <div class="col">
            <input type="number" @bind="productStock" class="form-control" placeholder="Stock" />
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="AddProduct">
                <i class="bi bi-plus-circle"></i> Add
            </button>
        </div>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in pagedProducts)
        {
            <tr>
                <td>@p.Id</td>
                <td>
                    <input @bind="p.Name" class="form-control form-control-sm" />
                </td>
                <td>
                    <input @bind="p.Description" class="form-control form-control-sm" />
                </td>
                <td>
                    <input type="number" step="0.01" @bind="p.Price" class="form-control form-control-sm" />
                </td>
                <td>
                    <input type="number" @bind="p.Stock" class="form-control form-control-sm" />
                </td>
                <td class="d-flex gap-1">
                    <button class="btn btn-sm btn-success" @onclick="() => UpdateProduct(p.Id, p)">
                        <span class="oi oi-check" aria-hidden="true">UPDATE</span>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(p.Id)">
                        <span class="oi oi-trash" aria-hidden="true">DEL</span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousPage">Previous</button>
        </li>

        @for (int i = 1; i <= totalPages; i++)
        {
            var pageIndex = i;
            <li class="page-item @(currentPage == pageIndex ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(pageIndex)">@pageIndex</button>
            </li>
        }

        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Next</button>
        </li>
    </ul>
</nav>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> pagedProducts => products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    private string productName = string.Empty;
    private string productDescription = string.Empty;
    private decimal productPrice = 0;
    private int productStock = 0;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => (int)Math.Ceiling((double)products.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await RefreshProducts();
    }

    private async Task RefreshProducts()
    {
        products = await _productService.GetProductsAsync();
        if (currentPage > totalPages) currentPage = totalPages;
    }

    private async Task AddProduct()
    {
        if (string.IsNullOrEmpty(productName) || productPrice <= 0 || productStock < 0)
            return;

        var newProduct = new CreateProductDto(productName, productDescription, productPrice, productStock);
        var created = await _productService.CreateProductAsync(newProduct);
        if (created != null)
        {
            await RefreshProducts();
            productName = string.Empty;
            productDescription = string.Empty;
            productPrice = 0;
            productStock = 0;
        }
    }

    private async Task UpdateProduct(int id, ProductDto product)
    {
        var updateProduct = new UpdateProductDto(product.Name, product.Description, product.Price, product.Stock);
        await _productService.UpdateProductAsync(id, updateProduct);
        await RefreshProducts();
    }

    private async Task DeleteProduct(int id)
    {
        var success = await _productService.DeleteProductAsync(id);
        if (success)
        {
            await RefreshProducts();
        }
    }

    private void GoToPage(int page) => currentPage = page;
    private void PreviousPage() { if (currentPage > 1) currentPage--; }
    private void NextPage() { if (currentPage < totalPages) currentPage++; }
}
