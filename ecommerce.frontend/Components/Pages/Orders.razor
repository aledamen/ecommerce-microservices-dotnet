@page "/orders"
@using ecommerce.frontend.Dtos
@using ecommerce.frontend.Dtos.Orders
@using ecommerce.frontend.Dtos.Products
@using ecommerce.frontend.Dtos.Customers
@using ecommerce.frontend.Interfaces
@inject IProductService _productService
@inject ICustomerService _customerService
@inject IOrderService _orderService
@rendermode InteractiveServer

<PageTitle>Orders Section</PageTitle>

<h1>Orders Section</h1>

<p>Create Orders</p>

<div class="row mb-3">
    <div class="col-md-6">
        <h5>Select Customer</h5>
        <select class="form-select" @bind="selectedCustomerId">
            <option value="">-- Select Customer --</option>
            @foreach (var customer in customers)
            {
                <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
            }
        </select>
    </div>
</div>

<h5>Select Products</h5>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Product</th>
            <th>Description</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in pagedProducts)
        {
            <tr>
                <td>@p.Name</td>
                <td>@p.Description</td>
                <td>@p.Price</td>
                <td>@p.Stock</td>
                <td>
                    <input type="number" min="0" max="@p.Stock" class="form-control" @bind="productQuantities[p.Id]" />
                </td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(currentProductsPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousProductsPage">Previous</button>
        </li>

        @for (int i = 1; i <= totalPagesProducts; i++)
        {
            var pageIndex = i;
            <li class="page-item @(currentProductsPage == pageIndex ? "active" : "")">
                <button class="page-link" @onclick="() => GoToProductsPage(pageIndex)">@pageIndex</button>
            </li>
        }

        <li class="page-item @(currentProductsPage == totalPagesProducts ? "disabled" : "")">
            <button class="page-link" @onclick="NextProductsPage">Next</button>
        </li>
    </ul>
</nav>

<button class="btn btn-primary mb-3" @onclick="CreateOrder">Create Order</button>

<h3>Orders List</h3>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Date</th>
            <th>Customer</th>
            <th>Total</th>
            <th>Products</th>
            <th>Shipping Address</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in pagedOrders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.OrderDate.ToString("yyyy-MM-dd HH:mm")</td>
                <td>@order.CustomerFirstName @order.CustomerLastName</td>
                <td>@order.Total</td>
                <td>
                    <select class="form-select">
                        @foreach (var item in order.Orders)
                        {
                            <option @key="item.ProductId">
                                @($"{item.ProductName} (x{item.Quantity}) - {item.SubTotal:0.00}")
                            </option>
                        }
                    </select>
                </td>
                <td>@order.ShippingAddress.Street @order.ShippingAddress.Number, @order.ShippingAddress.City</td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(currentOrdersPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PreviousOrdersPage">Previous</button>
        </li>

        @for (int i = 1; i <= totalPagesOrders; i++)
        {
            var pageIndex = i;
            <li class="page-item @(currentOrdersPage == pageIndex ? "active" : "")">
                <button class="page-link" @onclick="() => GoToOrdersPage(pageIndex)">@pageIndex</button>
            </li>
        }

        <li class="page-item @(currentOrdersPage == totalPagesOrders ? "disabled" : "")">
            <button class="page-link" @onclick="NextOrdersPage">Next</button>
        </li>
    </ul>
</nav>

@code {
    private List<ProductDto> products = new();
    private List<CustomerDto> customers = new();
    private List<OrderDto> orders = new();
    private Dictionary<int, int> productQuantities = new();
    private int selectedCustomerId;

    private int currentProductsPage = 1;
    private int pageSizeProducts = 5;
    private int totalPagesProducts => (int)Math.Ceiling((double)products.Count / pageSizeProducts);
    private List<ProductDto> pagedProducts => products.Skip((currentProductsPage - 1) * pageSizeProducts).Take(pageSizeProducts).ToList();

    private int currentOrdersPage = 1;
    private int pageSizeOrders = 5;
    private int totalPagesOrders => (int)Math.Ceiling((double)orders.Count / pageSizeOrders);
    private List<OrderDto> pagedOrders => orders.Skip((currentOrdersPage - 1) * pageSizeOrders).Take(pageSizeOrders).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCustomers();
        await LoadOrders();
    }

    private async Task LoadProducts()
    {
        products = await _productService.GetProductsAsync();
        productQuantities = products.ToDictionary(p => p.Id, p => 0);
    }

    private async Task LoadCustomers()
    {
        customers = await _customerService.GetCustomersAsync();
    }

    private async Task LoadOrders()
    {
        orders = await _orderService.GetOrdersAsync();
    }

    private async Task CreateOrder()
    {
        if (selectedCustomerId == 0) return;

        var selectedProducts = productQuantities
            .Where(kv => kv.Value > 0)
            .Select(kv => new ProductQuantityDto
            {
                ProductId = kv.Key,
                Quantity = kv.Value
            })
            .ToList();

        if (!selectedProducts.Any()) return;

        var newOrder = new CreateOrderDto
        {
            CustomerId = selectedCustomerId,
            ProductQuantity = selectedProducts
        };

        var created = await _orderService.CreateOrderAsync(newOrder);

        if (created != null)
        {
            await LoadOrders();
            await LoadProducts();
            productQuantities = products.ToDictionary(p => p.Id, p => 0);
            selectedCustomerId = 0;
        }
    }

    private void GoToProductsPage(int page)
    {
        currentProductsPage = page;
        StateHasChanged();
    }

    private void PreviousProductsPage() { if (currentProductsPage > 1) currentProductsPage--; }
    private void NextProductsPage() { if (currentProductsPage < totalPagesProducts) currentProductsPage++; }

    private void GoToOrdersPage(int page)
    {
        currentOrdersPage = page;
        StateHasChanged();
    }

    private void PreviousOrdersPage() { if (currentOrdersPage > 1) currentOrdersPage--; }
    private void NextOrdersPage() { if (currentOrdersPage < totalPagesOrders) currentOrdersPage++; }
}
